server:
  port: 6043
  servlet:
      contextPath: /api
  ssl:
    enabled: true
    keyStoreType: PKCS12
    key-store: classpath:keystore.p12
    key-store-password: password
    key-alias: tomcat
  http:
    port:
      6010
#spring.data.rest.base-path: /api
        
#security:
    #oauth2:
        #resource:
            #jwt:
                # Tells the JWT framework to fetch the public key from the authorization server during startup
                # Note: The authorization server needs to be running...
                #key-uri: "https://localhost:8043/oauth/token_key"

config:
    oauth2:
        publicKey: |
            -----BEGIN PUBLIC KEY-----
            MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDNQZKqTlO/+2b4ZdhqGJzGBDlt
            b5PZmBz1ALN2YLvt341pH6i5mO1V9cX5Ty1LM70fKfnIoYUP4KCE33dPnC7LkUwE
            /myh1zM6m8cbL5cYFPyP099thbVxzJkjHWqywvQih/qOOjliomKbM9pxG8Z1dB26
            hL9dSAZuA8xExjlPmQIDAQAB
            -----END PUBLIC KEY-----
        
---

spring:
    profiles: dev

#mysql database setting
#spring.profiles.active=dev
spring.jpa.database: mysql
spring.datasource.driverClassName: com.mysql.jdbc.Driver
spring.datasource.url: jdbc:mysql://localhost/services?useUnicode=true&useSSL=false&characterEncoding=utf-8&zeroDateTimeBehavior=convertToNull
spring.datasource.username: services
spring.datasource.password: services
# db init settings
#spring.jpa.hibernate.ddl-auto: update
spring.jpa.hibernate.ddl-auto: create-drop
#validate
spring.jpa.showSql: true
spring.datasource.initialization-mode: NEVER
spring.datasource.sqlScriptEncoding: UTF-8     

---

spring:
    profiles: intg

    
    
---

spring:
    profiles: uat

   
   
---

spring:
    profiles: prod    

              